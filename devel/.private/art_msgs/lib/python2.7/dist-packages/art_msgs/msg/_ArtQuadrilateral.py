# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from art_msgs/ArtQuadrilateral.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import art_msgs.msg

class ArtQuadrilateral(genpy.Message):
  _md5sum = "d704c9f78f17e5d333efb87e5729a41e"
  _type = "art_msgs/ArtQuadrilateral"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ART quadrilateral polygon
# $Id$

# Each of these polygons is a quadrilateral.  The four vertex points
# are ordered relative to the heading of the lane containing it.

geometry_msgs/Polygon poly
int32 bottom_left  = 0
int32 top_left     = 1
int32 top_right    = 2
int32 bottom_right = 3
int32 quad_size = 4

geometry_msgs/Point midpoint # Middle of the polygon

float32 heading         # average of right and left boundary headings
float32 length          # length of the polygon
int32 poly_id           # unique MapLanes ID

bool is_stop            # this poly has a stop waypoint
bool is_transition      # not a lane polygon, no waypoint
bool contains_way       # both start_way and end_way are the contained waypoint

MapID start_way
MapID end_way

LaneMarking left_boundary
LaneMarking right_boundary

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: art_msgs/MapID
# Road map identifier for segments, lanes and way-points.
# $Id$

uint16 NULL_ID = 65535

uint16 seg      # segment ID
uint16 lane     # lane ID
uint16 pt       # way-point ID

================================================================================
MSG: art_msgs/LaneMarking
# Route Network Definition File lane marking
# $Id$

int16 DOUBLE_YELLOW = 0
int16 SOLID_YELLOW = 1
int16 SOLID_WHITE = 2
int16 BROKEN_WHITE = 3
int16 UNDEFINED = 4

int16 lane_marking
"""
  # Pseudo-constants
  bottom_left = 0
  top_left = 1
  top_right = 2
  bottom_right = 3
  quad_size = 4

  __slots__ = ['poly','midpoint','heading','length','poly_id','is_stop','is_transition','contains_way','start_way','end_way','left_boundary','right_boundary']
  _slot_types = ['geometry_msgs/Polygon','geometry_msgs/Point','float32','float32','int32','bool','bool','bool','art_msgs/MapID','art_msgs/MapID','art_msgs/LaneMarking','art_msgs/LaneMarking']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       poly,midpoint,heading,length,poly_id,is_stop,is_transition,contains_way,start_way,end_way,left_boundary,right_boundary

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ArtQuadrilateral, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.poly is None:
        self.poly = geometry_msgs.msg.Polygon()
      if self.midpoint is None:
        self.midpoint = geometry_msgs.msg.Point()
      if self.heading is None:
        self.heading = 0.
      if self.length is None:
        self.length = 0.
      if self.poly_id is None:
        self.poly_id = 0
      if self.is_stop is None:
        self.is_stop = False
      if self.is_transition is None:
        self.is_transition = False
      if self.contains_way is None:
        self.contains_way = False
      if self.start_way is None:
        self.start_way = art_msgs.msg.MapID()
      if self.end_way is None:
        self.end_way = art_msgs.msg.MapID()
      if self.left_boundary is None:
        self.left_boundary = art_msgs.msg.LaneMarking()
      if self.right_boundary is None:
        self.right_boundary = art_msgs.msg.LaneMarking()
    else:
      self.poly = geometry_msgs.msg.Polygon()
      self.midpoint = geometry_msgs.msg.Point()
      self.heading = 0.
      self.length = 0.
      self.poly_id = 0
      self.is_stop = False
      self.is_transition = False
      self.contains_way = False
      self.start_way = art_msgs.msg.MapID()
      self.end_way = art_msgs.msg.MapID()
      self.left_boundary = art_msgs.msg.LaneMarking()
      self.right_boundary = art_msgs.msg.LaneMarking()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3d2fi3B6H2h.pack(_x.midpoint.x, _x.midpoint.y, _x.midpoint.z, _x.heading, _x.length, _x.poly_id, _x.is_stop, _x.is_transition, _x.contains_way, _x.start_way.seg, _x.start_way.lane, _x.start_way.pt, _x.end_way.seg, _x.end_way.lane, _x.end_way.pt, _x.left_boundary.lane_marking, _x.right_boundary.lane_marking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.poly is None:
        self.poly = geometry_msgs.msg.Polygon()
      if self.midpoint is None:
        self.midpoint = geometry_msgs.msg.Point()
      if self.start_way is None:
        self.start_way = art_msgs.msg.MapID()
      if self.end_way is None:
        self.end_way = art_msgs.msg.MapID()
      if self.left_boundary is None:
        self.left_boundary = art_msgs.msg.LaneMarking()
      if self.right_boundary is None:
        self.right_boundary = art_msgs.msg.LaneMarking()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.poly.points.append(val1)
      _x = self
      start = end
      end += 55
      (_x.midpoint.x, _x.midpoint.y, _x.midpoint.z, _x.heading, _x.length, _x.poly_id, _x.is_stop, _x.is_transition, _x.contains_way, _x.start_way.seg, _x.start_way.lane, _x.start_way.pt, _x.end_way.seg, _x.end_way.lane, _x.end_way.pt, _x.left_boundary.lane_marking, _x.right_boundary.lane_marking,) = _struct_3d2fi3B6H2h.unpack(str[start:end])
      self.is_stop = bool(self.is_stop)
      self.is_transition = bool(self.is_transition)
      self.contains_way = bool(self.contains_way)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly.points:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3d2fi3B6H2h.pack(_x.midpoint.x, _x.midpoint.y, _x.midpoint.z, _x.heading, _x.length, _x.poly_id, _x.is_stop, _x.is_transition, _x.contains_way, _x.start_way.seg, _x.start_way.lane, _x.start_way.pt, _x.end_way.seg, _x.end_way.lane, _x.end_way.pt, _x.left_boundary.lane_marking, _x.right_boundary.lane_marking))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.poly is None:
        self.poly = geometry_msgs.msg.Polygon()
      if self.midpoint is None:
        self.midpoint = geometry_msgs.msg.Point()
      if self.start_way is None:
        self.start_way = art_msgs.msg.MapID()
      if self.end_way is None:
        self.end_way = art_msgs.msg.MapID()
      if self.left_boundary is None:
        self.left_boundary = art_msgs.msg.LaneMarking()
      if self.right_boundary is None:
        self.right_boundary = art_msgs.msg.LaneMarking()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.poly.points.append(val1)
      _x = self
      start = end
      end += 55
      (_x.midpoint.x, _x.midpoint.y, _x.midpoint.z, _x.heading, _x.length, _x.poly_id, _x.is_stop, _x.is_transition, _x.contains_way, _x.start_way.seg, _x.start_way.lane, _x.start_way.pt, _x.end_way.seg, _x.end_way.lane, _x.end_way.pt, _x.left_boundary.lane_marking, _x.right_boundary.lane_marking,) = _struct_3d2fi3B6H2h.unpack(str[start:end])
      self.is_stop = bool(self.is_stop)
      self.is_transition = bool(self.is_transition)
      self.contains_way = bool(self.contains_way)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d2fi3B6H2h = struct.Struct("<3d2fi3B6H2h")
_struct_3f = struct.Struct("<3f")
