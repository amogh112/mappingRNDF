// Generated by gencpp from file art_msgs/PilotBehavior.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_PILOTBEHAVIOR_H
#define ART_MSGS_MESSAGE_PILOTBEHAVIOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct PilotBehavior_
{
  typedef PilotBehavior_<ContainerAllocator> Type;

  PilotBehavior_()
    : value(0)  {
    }
  PilotBehavior_(const ContainerAllocator& _alloc)
    : value(0)  {
  (void)_alloc;
    }



   typedef uint8_t _value_type;
  _value_type value;


    enum { Run = 0u };
     enum { Pause = 1u };
     enum { Off = 2u };
     enum { N_behaviors = 3u };
 

  typedef boost::shared_ptr< ::art_msgs::PilotBehavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::PilotBehavior_<ContainerAllocator> const> ConstPtr;

}; // struct PilotBehavior_

typedef ::art_msgs::PilotBehavior_<std::allocator<void> > PilotBehavior;

typedef boost::shared_ptr< ::art_msgs::PilotBehavior > PilotBehaviorPtr;
typedef boost::shared_ptr< ::art_msgs::PilotBehavior const> PilotBehaviorConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::PilotBehavior_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::PilotBehavior_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::PilotBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::PilotBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::PilotBehavior_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::PilotBehavior_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::PilotBehavior_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::PilotBehavior_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee280e8dd8b427f32f9742e8b4885525";
  }

  static const char* value(const ::art_msgs::PilotBehavior_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee280e8dd8b427f3ULL;
  static const uint64_t static_value2 = 0x2f9742e8b4885525ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/PilotBehavior";
  }

  static const char* value(const ::art_msgs::PilotBehavior_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART autonomous vehicle pilot node behaviors.\n\
#\n\
# Normally, the pilot node does Run, continually sending commands to\n\
# the servo device actuators and monitoring their state.  With Pause,\n\
# the pilot becomes passive, allowing a learning algorithm or human\n\
# controller direct access to those devices.  In the Off state,\n\
# various devices are shut down: the transmission in Park, the brake\n\
# released, the throttle at idle.  The engine is not turned off, but\n\
# it could be.\n\
\n\
# $Id$\n\
\n\
# Behavior value\n\
uint8 value\n\
\n\
# Behavior numbers:\n\
uint8 Run = 0                   # normal driving\n\
uint8 Pause = 1                 # stop issuing servo commands\n\
uint8 Off = 2                   # turn off devices\n\
uint8 N_behaviors = 3\n\
";
  }

  static const char* value(const ::art_msgs::PilotBehavior_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::PilotBehavior_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PilotBehavior_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::PilotBehavior_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_PILOTBEHAVIOR_H
