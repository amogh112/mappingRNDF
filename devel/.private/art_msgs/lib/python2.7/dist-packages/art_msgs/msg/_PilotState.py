# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from art_msgs/PilotState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import art_msgs.msg
import std_msgs.msg

class PilotState(genpy.Message):
  _md5sum = "c177b89612055fab019341d1fcc8bc65"
  _type = "art_msgs/PilotState"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ART pilot state message

# $Id$

Header  header

DriverState pilot               # pilot state

# current states of individual devices
# (considered CLOSED if device not publishing)
DriverState brake
DriverState imu
DriverState odom
DriverState shifter
DriverState steering
DriverState throttle

# true if pilot preempted for learning speed control
bool preempted

# latest commanded goal and current status
CarDrive target                 # current command
CarDrive plan                   # intermediate goal
CarDrive current                # current status

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: art_msgs/DriverState
# ART driver states -- similar to those in driver_base.

# $Id$

# constants
uint32 CLOSED = 0       # Not connected to the hardware
uint32 OPENED = 1       # Passively connected to the hardware
uint32 RUNNING = 2      # Sending hardware commands

uint32 state

================================================================================
MSG: art_msgs/CarDrive
# Driving command for a car-like vehicle using Ackermann steering.
# $Id$

# Drive at requested speed, acceleration and jerk (the 1st, 2nd and
# 3rd derivatives of position). All are non-negative scalars. 
#
# Speed is defined as the scalar magnitude of the velocity
# vector. Direction (forwards or backwards) is determined by the gear.
#
# Zero acceleration means change speed as quickly as
# possible. Positive acceleration may include deceleration as needed
# to match the desired speed. It represents a desired rate and also a
# limit not to exceed.
#
# Zero jerk means change acceleration as quickly as possible. Positive
# jerk describes the desired rate of acceleration change in both
# directions (positive and negative).
#
float32 speed                   # magnitude of velocity vector (m/s)
float32 acceleration            # desired acceleration (m/s^2)
float32 jerk                    # desired jerk (m/s^3)

# Assumes Ackermann (front-wheel) steering. This angle is the average
# yaw of the two front wheels in the vehicle frame of reference
# (positive left), ignoring their slightly differing angles as if it
# were a tricycle. This is *not* the angle of the steering wheel
# inside the passenger compartment.
#
float32 steering_angle          # steering angle (radians)

Gear gear                       # requested gear (no change if Naught)
PilotBehavior behavior          # requested pilot behavior

================================================================================
MSG: art_msgs/Gear
# ART vehicle transmission gear numbers
#
# Used by several different messages.

# $Id$

# Gear numbers. 
#
# Naught means: reset all Shifter relays; no change of CarDrive gear.
uint8 Naught = 0
uint8 Park = 1
uint8 Reverse = 2
uint8 Neutral = 3
uint8 Drive = 4
uint8 N_gears = 5

uint8 value		# requested or reported gear number

================================================================================
MSG: art_msgs/PilotBehavior
# ART autonomous vehicle pilot node behaviors.
#
# Normally, the pilot node does Run, continually sending commands to
# the servo device actuators and monitoring their state.  With Pause,
# the pilot becomes passive, allowing a learning algorithm or human
# controller direct access to those devices.  In the Off state,
# various devices are shut down: the transmission in Park, the brake
# released, the throttle at idle.  The engine is not turned off, but
# it could be.

# $Id$

# Behavior value
uint8 value

# Behavior numbers:
uint8 Run = 0                   # normal driving
uint8 Pause = 1                 # stop issuing servo commands
uint8 Off = 2                   # turn off devices
uint8 N_behaviors = 3
"""
  __slots__ = ['header','pilot','brake','imu','odom','shifter','steering','throttle','preempted','target','plan','current']
  _slot_types = ['std_msgs/Header','art_msgs/DriverState','art_msgs/DriverState','art_msgs/DriverState','art_msgs/DriverState','art_msgs/DriverState','art_msgs/DriverState','art_msgs/DriverState','bool','art_msgs/CarDrive','art_msgs/CarDrive','art_msgs/CarDrive']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pilot,brake,imu,odom,shifter,steering,throttle,preempted,target,plan,current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PilotState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pilot is None:
        self.pilot = art_msgs.msg.DriverState()
      if self.brake is None:
        self.brake = art_msgs.msg.DriverState()
      if self.imu is None:
        self.imu = art_msgs.msg.DriverState()
      if self.odom is None:
        self.odom = art_msgs.msg.DriverState()
      if self.shifter is None:
        self.shifter = art_msgs.msg.DriverState()
      if self.steering is None:
        self.steering = art_msgs.msg.DriverState()
      if self.throttle is None:
        self.throttle = art_msgs.msg.DriverState()
      if self.preempted is None:
        self.preempted = False
      if self.target is None:
        self.target = art_msgs.msg.CarDrive()
      if self.plan is None:
        self.plan = art_msgs.msg.CarDrive()
      if self.current is None:
        self.current = art_msgs.msg.CarDrive()
    else:
      self.header = std_msgs.msg.Header()
      self.pilot = art_msgs.msg.DriverState()
      self.brake = art_msgs.msg.DriverState()
      self.imu = art_msgs.msg.DriverState()
      self.odom = art_msgs.msg.DriverState()
      self.shifter = art_msgs.msg.DriverState()
      self.steering = art_msgs.msg.DriverState()
      self.throttle = art_msgs.msg.DriverState()
      self.preempted = False
      self.target = art_msgs.msg.CarDrive()
      self.plan = art_msgs.msg.CarDrive()
      self.current = art_msgs.msg.CarDrive()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7IB4f2B4f2B4f2B.pack(_x.pilot.state, _x.brake.state, _x.imu.state, _x.odom.state, _x.shifter.state, _x.steering.state, _x.throttle.state, _x.preempted, _x.target.speed, _x.target.acceleration, _x.target.jerk, _x.target.steering_angle, _x.target.gear.value, _x.target.behavior.value, _x.plan.speed, _x.plan.acceleration, _x.plan.jerk, _x.plan.steering_angle, _x.plan.gear.value, _x.plan.behavior.value, _x.current.speed, _x.current.acceleration, _x.current.jerk, _x.current.steering_angle, _x.current.gear.value, _x.current.behavior.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pilot is None:
        self.pilot = art_msgs.msg.DriverState()
      if self.brake is None:
        self.brake = art_msgs.msg.DriverState()
      if self.imu is None:
        self.imu = art_msgs.msg.DriverState()
      if self.odom is None:
        self.odom = art_msgs.msg.DriverState()
      if self.shifter is None:
        self.shifter = art_msgs.msg.DriverState()
      if self.steering is None:
        self.steering = art_msgs.msg.DriverState()
      if self.throttle is None:
        self.throttle = art_msgs.msg.DriverState()
      if self.target is None:
        self.target = art_msgs.msg.CarDrive()
      if self.plan is None:
        self.plan = art_msgs.msg.CarDrive()
      if self.current is None:
        self.current = art_msgs.msg.CarDrive()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 83
      (_x.pilot.state, _x.brake.state, _x.imu.state, _x.odom.state, _x.shifter.state, _x.steering.state, _x.throttle.state, _x.preempted, _x.target.speed, _x.target.acceleration, _x.target.jerk, _x.target.steering_angle, _x.target.gear.value, _x.target.behavior.value, _x.plan.speed, _x.plan.acceleration, _x.plan.jerk, _x.plan.steering_angle, _x.plan.gear.value, _x.plan.behavior.value, _x.current.speed, _x.current.acceleration, _x.current.jerk, _x.current.steering_angle, _x.current.gear.value, _x.current.behavior.value,) = _struct_7IB4f2B4f2B4f2B.unpack(str[start:end])
      self.preempted = bool(self.preempted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7IB4f2B4f2B4f2B.pack(_x.pilot.state, _x.brake.state, _x.imu.state, _x.odom.state, _x.shifter.state, _x.steering.state, _x.throttle.state, _x.preempted, _x.target.speed, _x.target.acceleration, _x.target.jerk, _x.target.steering_angle, _x.target.gear.value, _x.target.behavior.value, _x.plan.speed, _x.plan.acceleration, _x.plan.jerk, _x.plan.steering_angle, _x.plan.gear.value, _x.plan.behavior.value, _x.current.speed, _x.current.acceleration, _x.current.jerk, _x.current.steering_angle, _x.current.gear.value, _x.current.behavior.value))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pilot is None:
        self.pilot = art_msgs.msg.DriverState()
      if self.brake is None:
        self.brake = art_msgs.msg.DriverState()
      if self.imu is None:
        self.imu = art_msgs.msg.DriverState()
      if self.odom is None:
        self.odom = art_msgs.msg.DriverState()
      if self.shifter is None:
        self.shifter = art_msgs.msg.DriverState()
      if self.steering is None:
        self.steering = art_msgs.msg.DriverState()
      if self.throttle is None:
        self.throttle = art_msgs.msg.DriverState()
      if self.target is None:
        self.target = art_msgs.msg.CarDrive()
      if self.plan is None:
        self.plan = art_msgs.msg.CarDrive()
      if self.current is None:
        self.current = art_msgs.msg.CarDrive()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 83
      (_x.pilot.state, _x.brake.state, _x.imu.state, _x.odom.state, _x.shifter.state, _x.steering.state, _x.throttle.state, _x.preempted, _x.target.speed, _x.target.acceleration, _x.target.jerk, _x.target.steering_angle, _x.target.gear.value, _x.target.behavior.value, _x.plan.speed, _x.plan.acceleration, _x.plan.jerk, _x.plan.steering_angle, _x.plan.gear.value, _x.plan.behavior.value, _x.current.speed, _x.current.acceleration, _x.current.jerk, _x.current.steering_angle, _x.current.gear.value, _x.current.behavior.value,) = _struct_7IB4f2B4f2B4f2B.unpack(str[start:end])
      self.preempted = bool(self.preempted)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_7IB4f2B4f2B4f2B = struct.Struct("<7IB4f2B4f2B4f2B")
