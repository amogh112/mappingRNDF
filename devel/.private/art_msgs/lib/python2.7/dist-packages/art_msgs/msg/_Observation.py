# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from art_msgs/Observation.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Observation(genpy.Message):
  _md5sum = "6c2160774352970d1e5208366926f25e"
  _type = "art_msgs/Observation"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# result returned from a single observer
# $Id$

# possible observer ID values
int32 Nearest_forward    = 0		# current or closest lane
int32 Nearest_backward   = 1                  
int32 Adjacent_left	 = 2		# adjacent left or right lane
int32 Adjacent_right	 = 3
int32 All_left		 = 4		# all left or right lanes
int32 All_right 	 = 5
int32 Merge_into_nearest = 6            # merge into nearest lane on diff seg
int32 Merge_across_all   = 7            # merge across all lanes on diff seg
int32 Intersection	 = 8		# stop sign intersection precedence
int32 N_Observers        = 9

int32  oid                      # observer ID
string name                     # observer name

bool applicable                 # true if obseravation is applicable
bool clear                      # true if clear to go

# optional time and distance to nearest obstacle
# (only reported by some observers)
float32 time
float32 distance
float32 velocity
int32 nobjects  		# number of objects
"""
  # Pseudo-constants
  Nearest_forward = 0
  Nearest_backward = 1
  Adjacent_left = 2
  Adjacent_right = 3
  All_left = 4
  All_right = 5
  Merge_into_nearest = 6
  Merge_across_all = 7
  Intersection = 8
  N_Observers = 9

  __slots__ = ['oid','name','applicable','clear','time','distance','velocity','nobjects']
  _slot_types = ['int32','string','bool','bool','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       oid,name,applicable,clear,time,distance,velocity,nobjects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Observation, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.oid is None:
        self.oid = 0
      if self.name is None:
        self.name = ''
      if self.applicable is None:
        self.applicable = False
      if self.clear is None:
        self.clear = False
      if self.time is None:
        self.time = 0.
      if self.distance is None:
        self.distance = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.nobjects is None:
        self.nobjects = 0
    else:
      self.oid = 0
      self.name = ''
      self.applicable = False
      self.clear = False
      self.time = 0.
      self.distance = 0.
      self.velocity = 0.
      self.nobjects = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.oid))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B3fi.pack(_x.applicable, _x.clear, _x.time, _x.distance, _x.velocity, _x.nobjects))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.oid,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.applicable, _x.clear, _x.time, _x.distance, _x.velocity, _x.nobjects,) = _struct_2B3fi.unpack(str[start:end])
      self.applicable = bool(self.applicable)
      self.clear = bool(self.clear)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.oid))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2B3fi.pack(_x.applicable, _x.clear, _x.time, _x.distance, _x.velocity, _x.nobjects))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.oid,) = _struct_i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.applicable, _x.clear, _x.time, _x.distance, _x.velocity, _x.nobjects,) = _struct_2B3fi.unpack(str[start:end])
      self.applicable = bool(self.applicable)
      self.clear = bool(self.clear)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_2B3fi = struct.Struct("<2B3fi")
