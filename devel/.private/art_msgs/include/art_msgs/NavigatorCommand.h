// Generated by gencpp from file art_msgs/NavigatorCommand.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H
#define ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <art_msgs/Order.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct NavigatorCommand_
{
  typedef NavigatorCommand_<ContainerAllocator> Type;

  NavigatorCommand_()
    : header()
    , order()  {
    }
  NavigatorCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , order(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::art_msgs::Order_<ContainerAllocator>  _order_type;
  _order_type order;




  typedef boost::shared_ptr< ::art_msgs::NavigatorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::NavigatorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct NavigatorCommand_

typedef ::art_msgs::NavigatorCommand_<std::allocator<void> > NavigatorCommand;

typedef boost::shared_ptr< ::art_msgs::NavigatorCommand > NavigatorCommandPtr;
typedef boost::shared_ptr< ::art_msgs::NavigatorCommand const> NavigatorCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::NavigatorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::NavigatorCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::NavigatorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::NavigatorCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "415e5ee8b2ed1c9329a949ed123760f3";
  }

  static const char* value(const ::art_msgs::NavigatorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x415e5ee8b2ed1c93ULL;
  static const uint64_t static_value2 = 0x29a949ed123760f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/NavigatorCommand";
  }

  static const char* value(const ::art_msgs::NavigatorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# navigator command message\n\
# $Id$\n\
\n\
Header header\n\
Order  order\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/Order\n\
# commander order for the navigator\n\
# $Id$\n\
\n\
uint32 N_WAYPTS = 5     		# number of way-points in order\n\
uint32 N_CHKPTS = 2             	# number of checkpoints in order\n\
\n\
Behavior behavior			# requested behavior\n\
art_msgs/WayPoint[5] waypt       	# way-point array\n\
art_msgs/WayPoint[2] chkpt       	# next two goal checkpoints\n\
float32 min_speed			# in meters/sec\n\
float32 max_speed\n\
int32 replan_num\n\
int32 next_uturn         		# Uturn between [1] and [2]\n\
\n\
================================================================================\n\
MSG: art_msgs/Behavior\n\
# ART Navigator behaviors (lower numbers have higher priority)\n\
# $Id$\n\
\n\
# enumerated behavior values\n\
int16 Abort       = 0\n\
int16 Quit        = 1\n\
int16 Pause       = 2\n\
int16 Run         = 3\n\
int16 Suspend     = 4\n\
int16 Initialize  = 5\n\
int16 Go          = 6\n\
int16 NONE        = 7\n\
int16 N_behaviors = 8\n\
\n\
int16 value\n\
\n\
================================================================================\n\
MSG: art_msgs/WayPoint\n\
# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
";
  }

  static const char* value(const ::art_msgs::NavigatorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigatorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::NavigatorCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "order: ";
    s << std::endl;
    Printer< ::art_msgs::Order_<ContainerAllocator> >::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H
