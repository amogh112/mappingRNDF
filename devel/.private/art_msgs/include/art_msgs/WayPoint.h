// Generated by gencpp from file art_msgs/WayPoint.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_WAYPOINT_H
#define ART_MSGS_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <art_msgs/MapID.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct WayPoint_
{
  typedef WayPoint_<ContainerAllocator> Type;

  WayPoint_()
    : latitude(0.0)
    , longitude(0.0)
    , mapxy()
    , id()
    , index(0)
    , is_entry(false)
    , is_exit(false)
    , is_goal(false)
    , is_lane_change(false)
    , is_spot(false)
    , is_stop(false)
    , is_perimeter(false)
    , checkpoint_id(0)
    , lane_width(0.0)  {
    }
  WayPoint_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , mapxy(_alloc)
    , id(_alloc)
    , index(0)
    , is_entry(false)
    , is_exit(false)
    , is_goal(false)
    , is_lane_change(false)
    , is_spot(false)
    , is_stop(false)
    , is_perimeter(false)
    , checkpoint_id(0)
    , lane_width(0.0)  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _mapxy_type;
  _mapxy_type mapxy;

   typedef  ::art_msgs::MapID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef uint16_t _index_type;
  _index_type index;

   typedef uint8_t _is_entry_type;
  _is_entry_type is_entry;

   typedef uint8_t _is_exit_type;
  _is_exit_type is_exit;

   typedef uint8_t _is_goal_type;
  _is_goal_type is_goal;

   typedef uint8_t _is_lane_change_type;
  _is_lane_change_type is_lane_change;

   typedef uint8_t _is_spot_type;
  _is_spot_type is_spot;

   typedef uint8_t _is_stop_type;
  _is_stop_type is_stop;

   typedef uint8_t _is_perimeter_type;
  _is_perimeter_type is_perimeter;

   typedef int32_t _checkpoint_id_type;
  _checkpoint_id_type checkpoint_id;

   typedef float _lane_width_type;
  _lane_width_type lane_width;




  typedef boost::shared_ptr< ::art_msgs::WayPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::WayPoint_<ContainerAllocator> const> ConstPtr;

}; // struct WayPoint_

typedef ::art_msgs::WayPoint_<std::allocator<void> > WayPoint;

typedef boost::shared_ptr< ::art_msgs::WayPoint > WayPointPtr;
typedef boost::shared_ptr< ::art_msgs::WayPoint const> WayPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::WayPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::WayPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::WayPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::WayPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::WayPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::WayPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93d7bd4ade2e33f8e836f5cd46c71e50";
  }

  static const char* value(const ::art_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93d7bd4ade2e33f8ULL;
  static const uint64_t static_value2 = 0xe836f5cd46c71e50ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/WayPoint";
  }

  static const char* value(const ::art_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
";
  }

  static const char* value(const ::art_msgs::WayPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::WayPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.mapxy);
      stream.next(m.id);
      stream.next(m.index);
      stream.next(m.is_entry);
      stream.next(m.is_exit);
      stream.next(m.is_goal);
      stream.next(m.is_lane_change);
      stream.next(m.is_spot);
      stream.next(m.is_stop);
      stream.next(m.is_perimeter);
      stream.next(m.checkpoint_id);
      stream.next(m.lane_width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WayPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::WayPoint_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "mapxy: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.mapxy);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::art_msgs::MapID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.index);
    s << indent << "is_entry: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_entry);
    s << indent << "is_exit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_exit);
    s << indent << "is_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_goal);
    s << indent << "is_lane_change: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lane_change);
    s << indent << "is_spot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_spot);
    s << indent << "is_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_stop);
    s << indent << "is_perimeter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_perimeter);
    s << indent << "checkpoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.checkpoint_id);
    s << indent << "lane_width: ";
    Printer<float>::stream(s, indent + "  ", v.lane_width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_WAYPOINT_H
