# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from art_msgs/GpsInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GpsInfo(genpy.Message):
  _md5sum = "4f5e197f8744c1a11f1c94dc6e9a77a6"
  _type = "art_msgs/GpsInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# GPS position message
#
# Probably to be replaced by a standard ROS message for Diamondback.

# $Id$

# standard ROS header, includes time stamp
Header header

# Latitude in degrees.  Positive is north of equator, negative is
# south of equator.
float64 latitude

# Longitude in degrees.  Positive is east of prime meridian, negative
# is west of prime meridian.
float64 longitude

# Altitude, in meters.  Positive is above reference (e.g., sea-level),
# and negative is below.
float64 altitude

# UTM WGS84 coordinates, easting [m]
float64 utm_e

# UTM WGS84 coordinates, northing [m]
float64 utm_n

# UTM zone
string zone

# Horizontal dilution of position (HDOP)
float64 hdop

# Vertical dilution of position (VDOP)
float64 vdop

# Horizonal error [m]
float64 err_horz

# Vertical error [m]
float64 err_vert

# Quality of fix 0 = invalid, 1 = GPS fix, 2 = Differential GPS fix
uint16 INVALID_FIX = 0
uint16 GPS_FIX = 1
uint16 DGPS_FIX = 2
uint16 quality

# Number of satellites in view.
uint16 num_sats

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  INVALID_FIX = 0
  GPS_FIX = 1
  DGPS_FIX = 2

  __slots__ = ['header','latitude','longitude','altitude','utm_e','utm_n','zone','hdop','vdop','err_horz','err_vert','quality','num_sats']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','string','float64','float64','float64','float64','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,latitude,longitude,altitude,utm_e,utm_n,zone,hdop,vdop,err_horz,err_vert,quality,num_sats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.utm_e is None:
        self.utm_e = 0.
      if self.utm_n is None:
        self.utm_n = 0.
      if self.zone is None:
        self.zone = ''
      if self.hdop is None:
        self.hdop = 0.
      if self.vdop is None:
        self.vdop = 0.
      if self.err_horz is None:
        self.err_horz = 0.
      if self.err_vert is None:
        self.err_vert = 0.
      if self.quality is None:
        self.quality = 0
      if self.num_sats is None:
        self.num_sats = 0
    else:
      self.header = std_msgs.msg.Header()
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.utm_e = 0.
      self.utm_n = 0.
      self.zone = ''
      self.hdop = 0.
      self.vdop = 0.
      self.err_horz = 0.
      self.err_vert = 0.
      self.quality = 0
      self.num_sats = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d.pack(_x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n))
      _x = self.zone
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d2H.pack(_x.hdop, _x.vdop, _x.err_horz, _x.err_vert, _x.quality, _x.num_sats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n,) = _struct_5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zone = str[start:end].decode('utf-8')
      else:
        self.zone = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.hdop, _x.vdop, _x.err_horz, _x.err_vert, _x.quality, _x.num_sats,) = _struct_4d2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_5d.pack(_x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n))
      _x = self.zone
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d2H.pack(_x.hdop, _x.vdop, _x.err_horz, _x.err_vert, _x.quality, _x.num_sats))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 40
      (_x.latitude, _x.longitude, _x.altitude, _x.utm_e, _x.utm_n,) = _struct_5d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zone = str[start:end].decode('utf-8')
      else:
        self.zone = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.hdop, _x.vdop, _x.err_horz, _x.err_vert, _x.quality, _x.num_sats,) = _struct_4d2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_5d = struct.Struct("<5d")
_struct_3I = struct.Struct("<3I")
_struct_4d2H = struct.Struct("<4d2H")
