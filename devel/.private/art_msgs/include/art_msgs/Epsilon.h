// Generated by gencpp from file art_msgs/Epsilon.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_EPSILON_H
#define ART_MSGS_MESSAGE_EPSILON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct Epsilon_
{
  typedef Epsilon_<ContainerAllocator> Type;

  Epsilon_()
    {
    }
  Epsilon_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    static const float float_value;
     static const float distance;
     static const float speed;
     static const float brake_position;
     static const float steering_angle;
     static const float throttle_position;
 

  typedef boost::shared_ptr< ::art_msgs::Epsilon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::Epsilon_<ContainerAllocator> const> ConstPtr;

}; // struct Epsilon_

typedef ::art_msgs::Epsilon_<std::allocator<void> > Epsilon;

typedef boost::shared_ptr< ::art_msgs::Epsilon > EpsilonPtr;
typedef boost::shared_ptr< ::art_msgs::Epsilon const> EpsilonConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::float_value =
        
          1e-05
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::distance =
        
          0.01
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::speed =
        
          0.01
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::brake_position =
        
          0.01
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::steering_angle =
        
          0.001
        
        ;
   

   
   template<typename ContainerAllocator> const float
      Epsilon_<ContainerAllocator>::throttle_position =
        
          0.01
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::Epsilon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::Epsilon_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::Epsilon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::Epsilon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::Epsilon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::Epsilon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::Epsilon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::Epsilon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d2bf0d163e0062abbee50aa67ba8a3a";
  }

  static const char* value(const ::art_msgs::Epsilon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d2bf0d163e0062aULL;
  static const uint64_t static_value2 = 0xbbee50aa67ba8a3aULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/Epsilon";
  }

  static const char* value(const ::art_msgs::Epsilon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART epsilon constants\n\
#\n\
#   These constants represent trivial differences in distance, speed,\n\
#   angle, etc.\n\
\n\
# $Id$\n\
\n\
# constants\n\
float32 float_value = 1e-5\n\
float32 distance = 0.01\n\
float32 speed = 0.01\n\
\n\
# epsilon values for servo requests\n\
float32 brake_position = 0.01\n\
float32 steering_angle = 0.001\n\
float32 throttle_position = 0.01\n\
";
  }

  static const char* value(const ::art_msgs::Epsilon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::Epsilon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Epsilon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::art_msgs::Epsilon_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_EPSILON_H
