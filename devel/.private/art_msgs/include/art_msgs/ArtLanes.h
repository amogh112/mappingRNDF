// Generated by gencpp from file art_msgs/ArtLanes.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_ARTLANES_H
#define ART_MSGS_MESSAGE_ARTLANES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <art_msgs/ArtQuadrilateral.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct ArtLanes_
{
  typedef ArtLanes_<ContainerAllocator> Type;

  ArtLanes_()
    : header()
    , polygons()  {
    }
  ArtLanes_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , polygons(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >::other >  _polygons_type;
  _polygons_type polygons;




  typedef boost::shared_ptr< ::art_msgs::ArtLanes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ArtLanes_<ContainerAllocator> const> ConstPtr;

}; // struct ArtLanes_

typedef ::art_msgs::ArtLanes_<std::allocator<void> > ArtLanes;

typedef boost::shared_ptr< ::art_msgs::ArtLanes > ArtLanesPtr;
typedef boost::shared_ptr< ::art_msgs::ArtLanes const> ArtLanesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::ArtLanes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::ArtLanes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtLanes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtLanes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtLanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtLanes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtLanes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtLanes_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ArtLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "384de56fb723b4265b396fcf86b17531";
  }

  static const char* value(const ::art_msgs::ArtLanes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x384de56fb723b426ULL;
  static const uint64_t static_value2 = 0x5b396fcf86b17531ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ArtLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/ArtLanes";
  }

  static const char* value(const ::art_msgs::ArtLanes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ArtLanes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART lanes message\n\
# $Id$\n\
\n\
Header header\n\
ArtQuadrilateral[] polygons\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/ArtQuadrilateral\n\
# ART quadrilateral polygon\n\
# $Id$\n\
\n\
# Each of these polygons is a quadrilateral.  The four vertex points\n\
# are ordered relative to the heading of the lane containing it.\n\
\n\
geometry_msgs/Polygon poly\n\
int32 bottom_left  = 0\n\
int32 top_left     = 1\n\
int32 top_right    = 2\n\
int32 bottom_right = 3\n\
int32 quad_size = 4\n\
\n\
geometry_msgs/Point midpoint # Middle of the polygon\n\
\n\
float32 heading         # average of right and left boundary headings\n\
float32 length          # length of the polygon\n\
int32 poly_id           # unique MapLanes ID\n\
\n\
bool is_stop            # this poly has a stop waypoint\n\
bool is_transition      # not a lane polygon, no waypoint\n\
bool contains_way       # both start_way and end_way are the contained waypoint\n\
\n\
MapID start_way\n\
MapID end_way\n\
\n\
LaneMarking left_boundary\n\
LaneMarking right_boundary\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
================================================================================\n\
MSG: art_msgs/LaneMarking\n\
# Route Network Definition File lane marking\n\
# $Id$\n\
\n\
int16 DOUBLE_YELLOW = 0\n\
int16 SOLID_YELLOW = 1\n\
int16 SOLID_WHITE = 2\n\
int16 BROKEN_WHITE = 3\n\
int16 UNDEFINED = 4\n\
\n\
int16 lane_marking\n\
";
  }

  static const char* value(const ::art_msgs::ArtLanes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::ArtLanes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.polygons);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArtLanes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ArtLanes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::ArtLanes_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "polygons[]" << std::endl;
    for (size_t i = 0; i < v.polygons.size(); ++i)
    {
      s << indent << "  polygons[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >::stream(s, indent + "    ", v.polygons[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_ARTLANES_H
