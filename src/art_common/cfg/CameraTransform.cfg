#! /usr/bin/env python
#*
#*  Copyright (c) 2011, UT Austin, Austin Robot Technology
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

PACKAGE='art_common'

from dynamic_reconfigure.parameter_generator_catkin import *
from dynamic_reconfigure.msg import SensorLevels
from art_msgs.msg import ArtVehicle
import math
max_distance = 3.0

# only includes parameters reconfigurable while running

gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

#left front camera
gen.add("left_front_camera_px", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera position x",
        ArtVehicle.left_front_camera_px, -max_distance, max_distance)

gen.add("left_front_camera_py", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera position y",
        ArtVehicle.left_front_camera_py, -max_distance, max_distance)

gen.add("left_front_camera_pz", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera position z",
        ArtVehicle.left_front_camera_pz, -max_distance, max_distance)

gen.add("left_front_camera_roll", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera roll",
        ArtVehicle.left_front_camera_roll, -math.pi, math.pi)

gen.add("left_front_camera_pitch", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera pitch",
        ArtVehicle.left_front_camera_pitch, -math.pi, math.pi)

gen.add("left_front_camera_yaw", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "left front camera yaw",
        ArtVehicle.left_front_camera_yaw, -math.pi, math.pi)

#center front camera
gen.add("center_front_camera_px", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera position x",
        ArtVehicle.center_front_camera_px, -max_distance, max_distance)

gen.add("center_front_camera_py", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera position y",
        ArtVehicle.center_front_camera_py, -max_distance, max_distance)

gen.add("center_front_camera_pz", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera position z",
        ArtVehicle.center_front_camera_pz, -max_distance, max_distance)

gen.add("center_front_camera_roll", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera roll",
        ArtVehicle.center_front_camera_roll, -math.pi, math.pi)

gen.add("center_front_camera_pitch", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera pitch",
        ArtVehicle.center_front_camera_pitch, -math.pi, math.pi)

gen.add("center_front_camera_yaw", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "center front camera yaw",
        ArtVehicle.center_front_camera_yaw, -math.pi, math.pi)

#right front camera
gen.add("right_front_camera_px", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera position x",
        ArtVehicle.right_front_camera_px, -max_distance, max_distance)

gen.add("right_front_camera_py", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera position y",
        ArtVehicle.right_front_camera_py, -max_distance, max_distance)

gen.add("right_front_camera_pz", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera position z",
        ArtVehicle.right_front_camera_pz, -max_distance, max_distance)

gen.add("right_front_camera_roll", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera roll",
        ArtVehicle.right_front_camera_roll, -math.pi, math.pi)

gen.add("right_front_camera_pitch", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera pitch",
        ArtVehicle.right_front_camera_pitch, -math.pi, math.pi)

gen.add("right_front_camera_yaw", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "right front camera yaw",
        ArtVehicle.right_front_camera_yaw, -math.pi, math.pi)

#velodyne
gen.add("velodyne_px", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne position x",
        ArtVehicle.velodyne_px, -max_distance, max_distance)

gen.add("velodyne_py", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne position y",
        ArtVehicle.velodyne_py, -max_distance, max_distance)

gen.add("velodyne_pz", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne position z",
        ArtVehicle.velodyne_pz, -max_distance, max_distance)

gen.add("velodyne_roll", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne roll",
        ArtVehicle.velodyne_roll, -math.pi, math.pi)

gen.add("velodyne_pitch", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne pitch",
        ArtVehicle.velodyne_pitch, -math.pi, math.pi)

gen.add("velodyne_yaw", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "velodyne yaw",
        ArtVehicle.velodyne_yaw, -math.pi, math.pi)

exit(gen.generate(PACKAGE, "vehicle_configurable_tf", "CameraTransform"))
