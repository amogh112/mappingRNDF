# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from art_msgs/Conversions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Conversions(genpy.Message):
  _md5sum = "44629a726979d07e4fc2da05a3fca804"
  _type = "art_msgs/Conversions"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#  Units conversion constants
#
#  Copyright (C) 2007, 2009 Austin Robot Technology                    
#  License: Modified BSD Software License Agreement

#  $Id$

# Unit conversion constants:

float64 CM_PER_INCH = 2.54
float64 CM_PER_METER = 100.0
float64 INCHES_PER_FOOT = 12.0
float64 METERS_PER_FOOT = 0.3048
float64 METERS_PER_MILE = 1609.344
float64 MMETERS_PER_KM = 1000000.0
float64 MMETERS_PER_MILE = 1609344.0

int64 MINUTES_PER_HOUR = 60
int64 SECONDS_PER_MINUTE = 60
int64 SECONDS_PER_HOUR = 3600
"""
  # Pseudo-constants
  CM_PER_INCH = 2.54
  CM_PER_METER = 100.0
  INCHES_PER_FOOT = 12.0
  METERS_PER_FOOT = 0.3048
  METERS_PER_MILE = 1609.344
  MMETERS_PER_KM = 1000000.0
  MMETERS_PER_MILE = 1609344.0
  MINUTES_PER_HOUR = 60
  SECONDS_PER_MINUTE = 60
  SECONDS_PER_HOUR = 3600

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Conversions, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
