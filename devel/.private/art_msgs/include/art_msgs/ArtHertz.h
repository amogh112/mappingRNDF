// Generated by gencpp from file art_msgs/ArtHertz.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_ARTHERTZ_H
#define ART_MSGS_MESSAGE_ARTHERTZ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct ArtHertz_
{
  typedef ArtHertz_<ContainerAllocator> Type;

  ArtHertz_()
    {
    }
  ArtHertz_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    static const double APPLANIX;
     static const double BRAKE;
     static const double COMMANDER;
     static const double IOADR;
     static const double LASER_FUSION;
     static const double LASER_NOISE;
     static const double MAPLANES;
     static const double NAVIGATOR;
     static const double OBSERVERS;
     static const double PILOT;
     static const double PSEUDO_LASER;
     static const double SICKFAST;
     static const double STEERING;
     static const double THROTTLE;
     static const double VEHICLE_TF;
 

  typedef boost::shared_ptr< ::art_msgs::ArtHertz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ArtHertz_<ContainerAllocator> const> ConstPtr;

}; // struct ArtHertz_

typedef ::art_msgs::ArtHertz_<std::allocator<void> > ArtHertz;

typedef boost::shared_ptr< ::art_msgs::ArtHertz > ArtHertzPtr;
typedef boost::shared_ptr< ::art_msgs::ArtHertz const> ArtHertzConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::APPLANIX =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::BRAKE =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::COMMANDER =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::IOADR =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::LASER_FUSION =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::LASER_NOISE =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::MAPLANES =
        
          5.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::NAVIGATOR =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::OBSERVERS =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::PILOT =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::PSEUDO_LASER =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::SICKFAST =
        
          10.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::STEERING =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::THROTTLE =
        
          20.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ArtHertz_<ContainerAllocator>::VEHICLE_TF =
        
          5.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::ArtHertz_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::ArtHertz_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtHertz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtHertz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtHertz_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtHertz_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtHertz_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtHertz_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe3d67243941cb078e664e9bc369f978";
  }

  static const char* value(const ::art_msgs::ArtHertz_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe3d67243941cb07ULL;
  static const uint64_t static_value2 = 0x8e664e9bc369f978ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/ArtHertz";
  }

  static const char* value(const ::art_msgs::ArtHertz_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  Real-time cycle rates for various ART vehicle nodes.\n\
# $Id$\n\
\n\
#  All units are hertz (cycles/second).  This is not a published\n\
#  message, it defines multi-language constants.\n\
\n\
float64 APPLANIX        = 20.0\n\
float64 BRAKE           = 20.0\n\
float64 COMMANDER       = 10.0\n\
float64 IOADR           = 10.0\n\
float64 LASER_FUSION    = 10.0\n\
float64 LASER_NOISE     = 10.0\n\
float64 MAPLANES        = 5.0\n\
float64 NAVIGATOR       = 20.0\n\
float64 OBSERVERS       = 10.0\n\
float64 PILOT           = 20.0\n\
float64 PSEUDO_LASER    = 10.0\n\
float64 SICKFAST        = 10.0\n\
float64 STEERING        = 20.0\n\
float64 THROTTLE        = 20.0\n\
float64 VEHICLE_TF      = 5.0\n\
";
  }

  static const char* value(const ::art_msgs::ArtHertz_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::ArtHertz_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArtHertz_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::art_msgs::ArtHertz_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_ARTHERTZ_H
