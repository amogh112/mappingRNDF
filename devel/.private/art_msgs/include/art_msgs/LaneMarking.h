// Generated by gencpp from file art_msgs/LaneMarking.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_LANEMARKING_H
#define ART_MSGS_MESSAGE_LANEMARKING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace art_msgs
{
template <class ContainerAllocator>
struct LaneMarking_
{
  typedef LaneMarking_<ContainerAllocator> Type;

  LaneMarking_()
    : lane_marking(0)  {
    }
  LaneMarking_(const ContainerAllocator& _alloc)
    : lane_marking(0)  {
  (void)_alloc;
    }



   typedef int16_t _lane_marking_type;
  _lane_marking_type lane_marking;


    enum { DOUBLE_YELLOW = 0 };
     enum { SOLID_YELLOW = 1 };
     enum { SOLID_WHITE = 2 };
     enum { BROKEN_WHITE = 3 };
     enum { UNDEFINED = 4 };
 

  typedef boost::shared_ptr< ::art_msgs::LaneMarking_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::LaneMarking_<ContainerAllocator> const> ConstPtr;

}; // struct LaneMarking_

typedef ::art_msgs::LaneMarking_<std::allocator<void> > LaneMarking;

typedef boost::shared_ptr< ::art_msgs::LaneMarking > LaneMarkingPtr;
typedef boost::shared_ptr< ::art_msgs::LaneMarking const> LaneMarkingConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::LaneMarking_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::LaneMarking_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::LaneMarking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::LaneMarking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::LaneMarking_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::LaneMarking_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::LaneMarking_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::LaneMarking_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::LaneMarking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "39a90d328b8d3f3a2f63e9f13330afca";
  }

  static const char* value(const ::art_msgs::LaneMarking_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x39a90d328b8d3f3aULL;
  static const uint64_t static_value2 = 0x2f63e9f13330afcaULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::LaneMarking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/LaneMarking";
  }

  static const char* value(const ::art_msgs::LaneMarking_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::LaneMarking_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Route Network Definition File lane marking\n\
# $Id$\n\
\n\
int16 DOUBLE_YELLOW = 0\n\
int16 SOLID_YELLOW = 1\n\
int16 SOLID_WHITE = 2\n\
int16 BROKEN_WHITE = 3\n\
int16 UNDEFINED = 4\n\
\n\
int16 lane_marking\n\
";
  }

  static const char* value(const ::art_msgs::LaneMarking_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::LaneMarking_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lane_marking);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaneMarking_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::LaneMarking_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::LaneMarking_<ContainerAllocator>& v)
  {
    s << indent << "lane_marking: ";
    Printer<int16_t>::stream(s, indent + "  ", v.lane_marking);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_LANEMARKING_H
