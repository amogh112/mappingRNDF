// Generated by gencpp from file art_msgs/CarDriveStamped.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_CARDRIVESTAMPED_H
#define ART_MSGS_MESSAGE_CARDRIVESTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <art_msgs/CarDrive.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct CarDriveStamped_
{
  typedef CarDriveStamped_<ContainerAllocator> Type;

  CarDriveStamped_()
    : header()
    , control()  {
    }
  CarDriveStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , control(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::art_msgs::CarDrive_<ContainerAllocator>  _control_type;
  _control_type control;




  typedef boost::shared_ptr< ::art_msgs::CarDriveStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::CarDriveStamped_<ContainerAllocator> const> ConstPtr;

}; // struct CarDriveStamped_

typedef ::art_msgs::CarDriveStamped_<std::allocator<void> > CarDriveStamped;

typedef boost::shared_ptr< ::art_msgs::CarDriveStamped > CarDriveStampedPtr;
typedef boost::shared_ptr< ::art_msgs::CarDriveStamped const> CarDriveStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::CarDriveStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::CarDriveStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::CarDriveStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::CarDriveStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::CarDriveStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d243ac5e38754a52c8788d4d37db7a05";
  }

  static const char* value(const ::art_msgs::CarDriveStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd243ac5e38754a52ULL;
  static const uint64_t static_value2 = 0xc8788d4d37db7a05ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/CarDriveStamped";
  }

  static const char* value(const ::art_msgs::CarDriveStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# CarDrive message with timestamp.\n\
# $Id$\n\
\n\
Header    header\n\
CarDrive  control\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/CarDrive\n\
# Driving command for a car-like vehicle using Ackermann steering.\n\
# $Id$\n\
\n\
# Drive at requested speed, acceleration and jerk (the 1st, 2nd and\n\
# 3rd derivatives of position). All are non-negative scalars. \n\
#\n\
# Speed is defined as the scalar magnitude of the velocity\n\
# vector. Direction (forwards or backwards) is determined by the gear.\n\
#\n\
# Zero acceleration means change speed as quickly as\n\
# possible. Positive acceleration may include deceleration as needed\n\
# to match the desired speed. It represents a desired rate and also a\n\
# limit not to exceed.\n\
#\n\
# Zero jerk means change acceleration as quickly as possible. Positive\n\
# jerk describes the desired rate of acceleration change in both\n\
# directions (positive and negative).\n\
#\n\
float32 speed                   # magnitude of velocity vector (m/s)\n\
float32 acceleration            # desired acceleration (m/s^2)\n\
float32 jerk                    # desired jerk (m/s^3)\n\
\n\
# Assumes Ackermann (front-wheel) steering. This angle is the average\n\
# yaw of the two front wheels in the vehicle frame of reference\n\
# (positive left), ignoring their slightly differing angles as if it\n\
# were a tricycle. This is *not* the angle of the steering wheel\n\
# inside the passenger compartment.\n\
#\n\
float32 steering_angle          # steering angle (radians)\n\
\n\
Gear gear                       # requested gear (no change if Naught)\n\
PilotBehavior behavior          # requested pilot behavior\n\
\n\
================================================================================\n\
MSG: art_msgs/Gear\n\
# ART vehicle transmission gear numbers\n\
#\n\
# Used by several different messages.\n\
\n\
# $Id$\n\
\n\
# Gear numbers. \n\
#\n\
# Naught means: reset all Shifter relays; no change of CarDrive gear.\n\
uint8 Naught = 0\n\
uint8 Park = 1\n\
uint8 Reverse = 2\n\
uint8 Neutral = 3\n\
uint8 Drive = 4\n\
uint8 N_gears = 5\n\
\n\
uint8 value		# requested or reported gear number\n\
\n\
================================================================================\n\
MSG: art_msgs/PilotBehavior\n\
# ART autonomous vehicle pilot node behaviors.\n\
#\n\
# Normally, the pilot node does Run, continually sending commands to\n\
# the servo device actuators and monitoring their state.  With Pause,\n\
# the pilot becomes passive, allowing a learning algorithm or human\n\
# controller direct access to those devices.  In the Off state,\n\
# various devices are shut down: the transmission in Park, the brake\n\
# released, the throttle at idle.  The engine is not turned off, but\n\
# it could be.\n\
\n\
# $Id$\n\
\n\
# Behavior value\n\
uint8 value\n\
\n\
# Behavior numbers:\n\
uint8 Run = 0                   # normal driving\n\
uint8 Pause = 1                 # stop issuing servo commands\n\
uint8 Off = 2                   # turn off devices\n\
uint8 N_behaviors = 3\n\
";
  }

  static const char* value(const ::art_msgs::CarDriveStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.control);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CarDriveStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::CarDriveStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::CarDriveStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "control: ";
    s << std::endl;
    Printer< ::art_msgs::CarDrive_<ContainerAllocator> >::stream(s, indent + "  ", v.control);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_CARDRIVESTAMPED_H
