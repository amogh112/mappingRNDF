// Generated by gencpp from file art_msgs/ArtQuadrilateral.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_ARTQUADRILATERAL_H
#define ART_MSGS_MESSAGE_ARTQUADRILATERAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Point.h>
#include <art_msgs/MapID.h>
#include <art_msgs/MapID.h>
#include <art_msgs/LaneMarking.h>
#include <art_msgs/LaneMarking.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct ArtQuadrilateral_
{
  typedef ArtQuadrilateral_<ContainerAllocator> Type;

  ArtQuadrilateral_()
    : poly()
    , midpoint()
    , heading(0.0)
    , length(0.0)
    , poly_id(0)
    , is_stop(false)
    , is_transition(false)
    , contains_way(false)
    , start_way()
    , end_way()
    , left_boundary()
    , right_boundary()  {
    }
  ArtQuadrilateral_(const ContainerAllocator& _alloc)
    : poly(_alloc)
    , midpoint(_alloc)
    , heading(0.0)
    , length(0.0)
    , poly_id(0)
    , is_stop(false)
    , is_transition(false)
    , contains_way(false)
    , start_way(_alloc)
    , end_way(_alloc)
    , left_boundary(_alloc)
    , right_boundary(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _poly_type;
  _poly_type poly;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _midpoint_type;
  _midpoint_type midpoint;

   typedef float _heading_type;
  _heading_type heading;

   typedef float _length_type;
  _length_type length;

   typedef int32_t _poly_id_type;
  _poly_id_type poly_id;

   typedef uint8_t _is_stop_type;
  _is_stop_type is_stop;

   typedef uint8_t _is_transition_type;
  _is_transition_type is_transition;

   typedef uint8_t _contains_way_type;
  _contains_way_type contains_way;

   typedef  ::art_msgs::MapID_<ContainerAllocator>  _start_way_type;
  _start_way_type start_way;

   typedef  ::art_msgs::MapID_<ContainerAllocator>  _end_way_type;
  _end_way_type end_way;

   typedef  ::art_msgs::LaneMarking_<ContainerAllocator>  _left_boundary_type;
  _left_boundary_type left_boundary;

   typedef  ::art_msgs::LaneMarking_<ContainerAllocator>  _right_boundary_type;
  _right_boundary_type right_boundary;


    enum { bottom_left = 0 };
     enum { top_left = 1 };
     enum { top_right = 2 };
     enum { bottom_right = 3 };
     enum { quad_size = 4 };
 

  typedef boost::shared_ptr< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> const> ConstPtr;

}; // struct ArtQuadrilateral_

typedef ::art_msgs::ArtQuadrilateral_<std::allocator<void> > ArtQuadrilateral;

typedef boost::shared_ptr< ::art_msgs::ArtQuadrilateral > ArtQuadrilateralPtr;
typedef boost::shared_ptr< ::art_msgs::ArtQuadrilateral const> ArtQuadrilateralConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::ArtQuadrilateral_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d704c9f78f17e5d333efb87e5729a41e";
  }

  static const char* value(const ::art_msgs::ArtQuadrilateral_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd704c9f78f17e5d3ULL;
  static const uint64_t static_value2 = 0x33efb87e5729a41eULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/ArtQuadrilateral";
  }

  static const char* value(const ::art_msgs::ArtQuadrilateral_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ART quadrilateral polygon\n\
# $Id$\n\
\n\
# Each of these polygons is a quadrilateral.  The four vertex points\n\
# are ordered relative to the heading of the lane containing it.\n\
\n\
geometry_msgs/Polygon poly\n\
int32 bottom_left  = 0\n\
int32 top_left     = 1\n\
int32 top_right    = 2\n\
int32 bottom_right = 3\n\
int32 quad_size = 4\n\
\n\
geometry_msgs/Point midpoint # Middle of the polygon\n\
\n\
float32 heading         # average of right and left boundary headings\n\
float32 length          # length of the polygon\n\
int32 poly_id           # unique MapLanes ID\n\
\n\
bool is_stop            # this poly has a stop waypoint\n\
bool is_transition      # not a lane polygon, no waypoint\n\
bool contains_way       # both start_way and end_way are the contained waypoint\n\
\n\
MapID start_way\n\
MapID end_way\n\
\n\
LaneMarking left_boundary\n\
LaneMarking right_boundary\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
================================================================================\n\
MSG: art_msgs/LaneMarking\n\
# Route Network Definition File lane marking\n\
# $Id$\n\
\n\
int16 DOUBLE_YELLOW = 0\n\
int16 SOLID_YELLOW = 1\n\
int16 SOLID_WHITE = 2\n\
int16 BROKEN_WHITE = 3\n\
int16 UNDEFINED = 4\n\
\n\
int16 lane_marking\n\
";
  }

  static const char* value(const ::art_msgs::ArtQuadrilateral_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poly);
      stream.next(m.midpoint);
      stream.next(m.heading);
      stream.next(m.length);
      stream.next(m.poly_id);
      stream.next(m.is_stop);
      stream.next(m.is_transition);
      stream.next(m.contains_way);
      stream.next(m.start_way);
      stream.next(m.end_way);
      stream.next(m.left_boundary);
      stream.next(m.right_boundary);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArtQuadrilateral_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ArtQuadrilateral_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::ArtQuadrilateral_<ContainerAllocator>& v)
  {
    s << indent << "poly: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.poly);
    s << indent << "midpoint: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.midpoint);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "poly_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.poly_id);
    s << indent << "is_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_stop);
    s << indent << "is_transition: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_transition);
    s << indent << "contains_way: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.contains_way);
    s << indent << "start_way: ";
    s << std::endl;
    Printer< ::art_msgs::MapID_<ContainerAllocator> >::stream(s, indent + "  ", v.start_way);
    s << indent << "end_way: ";
    s << std::endl;
    Printer< ::art_msgs::MapID_<ContainerAllocator> >::stream(s, indent + "  ", v.end_way);
    s << indent << "left_boundary: ";
    s << std::endl;
    Printer< ::art_msgs::LaneMarking_<ContainerAllocator> >::stream(s, indent + "  ", v.left_boundary);
    s << indent << "right_boundary: ";
    s << std::endl;
    Printer< ::art_msgs::LaneMarking_<ContainerAllocator> >::stream(s, indent + "  ", v.right_boundary);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_ARTQUADRILATERAL_H
