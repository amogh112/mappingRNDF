// Generated by gencpp from file art_msgs/IOadrState.msg
// DO NOT EDIT!


#ifndef ART_MSGS_MESSAGE_IOADRSTATE_H
#define ART_MSGS_MESSAGE_IOADRSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace art_msgs
{
template <class ContainerAllocator>
struct IOadrState_
{
  typedef IOadrState_<ContainerAllocator> Type;

  IOadrState_()
    : header()
    , relays(0)
    , digitalB(0)
    , voltages()  {
      voltages.assign(0.0);
  }
  IOadrState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , relays(0)
    , digitalB(0)
    , voltages()  {
  (void)_alloc;
      voltages.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _relays_type;
  _relays_type relays;

   typedef uint8_t _digitalB_type;
  _digitalB_type digitalB;

   typedef boost::array<float, 3>  _voltages_type;
  _voltages_type voltages;


    enum { ENABLED = 1u };
     enum { RUN = 2u };
     enum { FLASHER = 4u };
     enum { ALARM = 8u };
     enum { LASER_FRONT = 16u };
     enum { LASER_TOP = 32u };
     enum { TURN_LEFT = 64u };
     enum { TURN_RIGHT = 128u };
     enum { N_VOLTAGES = 3 };
 

  typedef boost::shared_ptr< ::art_msgs::IOadrState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::IOadrState_<ContainerAllocator> const> ConstPtr;

}; // struct IOadrState_

typedef ::art_msgs::IOadrState_<std::allocator<void> > IOadrState;

typedef boost::shared_ptr< ::art_msgs::IOadrState > IOadrStatePtr;
typedef boost::shared_ptr< ::art_msgs::IOadrState const> IOadrStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::art_msgs::IOadrState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::art_msgs::IOadrState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'art_msgs': ['/home/amogh/rosws2/src/art_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::IOadrState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::art_msgs::IOadrState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::IOadrState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::art_msgs::IOadrState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::IOadrState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::art_msgs::IOadrState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "990cf1675736cc78e57b4a0463dd540e";
  }

  static const char* value(const ::art_msgs::IOadrState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x990cf1675736cc78ULL;
  static const uint64_t static_value2 = 0xe57b4a0463dd540eULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "art_msgs/IOadrState";
  }

  static const char* value(const ::art_msgs::IOadrState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# NCD IOADR8x controller state message for ART vehicle\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
# constant bit values for relays and digitalB inputs\n\
uint8 ENABLED      =   1\n\
uint8 RUN          =   2\n\
uint8 FLASHER      =   4\n\
uint8 ALARM        =   8\n\
uint8 LASER_FRONT  =  16\n\
uint8 LASER_TOP    =  32\n\
uint8 TURN_LEFT    =  64\n\
uint8 TURN_RIGHT   = 128\n\
\n\
uint8   relays                  # current relays settings\n\
\n\
uint8   digitalB                # digital input B\n\
\n\
# generally, voltages[0] is the steering position sensor\n\
int32 N_VOLTAGES = 3            # number of analog voltages\n\
float32[3] voltages             # analog voltages [A, B, C]\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::art_msgs::IOadrState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::art_msgs::IOadrState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.relays);
      stream.next(m.digitalB);
      stream.next(m.voltages);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOadrState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::art_msgs::IOadrState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "relays: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relays);
    s << indent << "digitalB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digitalB);
    s << indent << "voltages[]" << std::endl;
    for (size_t i = 0; i < v.voltages.size(); ++i)
    {
      s << indent << "  voltages[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltages[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_IOADRSTATE_H
